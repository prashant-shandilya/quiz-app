package main

import("flag" 
"time"
"fmt"
"os"
"encoding/csv"
)

func problemPuller(filename string) ([]problem,error){
	if fObj,err := os.Open(filename); err == nil{
		csvR := csv.NewReader(fObj)

		if cLines,err := csvR.ReadAll(); err == nil{
			return parseProblem(cLines),nil
		}else{
			return nil,fmt.Errorf("Something went wrong.")		
		}

	}else {
		return nil,fmt.Errorf("Something went wrong.")
	}

}

func main(){
	fName := flag.String("f","quiz.csv","path to the csv file")
	timer := flag.Int("t",30,"time limit for the quiz")

	flag.Parse()

	problems,err := problemPuller(*fName)

	if err != nil{
		exit()
	}

	correctAns := 0

	tObj := time.NewTimer(time.Duration(*timer) * time.Second)

	ansC := make(chan string)

	problemLoop:
	for i,p := range problems{
		var answer string
		fmt.Printf("Problem #%d: %s = ",i+1,p.q)
		go func(){
			fmt.Scanf("%s\n",&answer)
			ansC <- answer
		}()
		select{
		case <-tObj.C: // some sort of channel is being returned here
			fmt.Println()
			break problemLoop
		case iAns := <-ansC:
			if iAns == p.a{
				correctAns++
			}
			if i == len(problems)-1{
				close(ansC)
			}
		}
	}

	fmt.Printf("You scored %d out of %d.\n",correctAns,len(problems))
}

func parseProblem(lines [][]string) []problem{
	//r is a slice of problems
	r := make([]problem,len(lines))

	for i:=0;i<len(lines);i++{
		// i is for i'th line and 0 for question and 1 for answer.
		r[i] = problem{q:lines[i][0],a:lines[i][1]}

	}
	return r
}

type problem struct{
	q string
	a string
}
func exit(){
	fmt.Printf("Exiting the program.")
	os.Exit(1)
}
